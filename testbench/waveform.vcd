$version Generated by VerilatedVcd $end
$date Fri Apr 14 09:46:13 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 @! PC [31:0] $end
  $var wire 32 D! addr [31:0] $end
  $var wire  1 =! clk $end
  $var wire  1 G! en $end
  $var wire 32 ?! inst [31:0] $end
  $var wire  1 B! inst_ready $end
  $var wire  1 A! pc_valid $end
  $var wire 32 C! rdata [31:0] $end
  $var wire  1 >! reset $end
  $var wire 32 E! wdata [31:0] $end
  $var wire  4 F! wmask [3:0] $end
  $scope module Top $end
   $var wire 32 @! PC [31:0] $end
   $var wire 32 D! addr [31:0] $end
   $var wire  1 =! clk $end
   $var wire 32 J difftest_Inst [31:0] $end
   $var wire 32 K difftest_PC [31:0] $end
   $var wire 103 C difftest_bus [102:0] $end
   $var wire  1 G difftest_inst_valid $end
   $var wire 32 L difftest_result [31:0] $end
   $var wire  1 I difftest_wreg_en $end
   $var wire  5 H difftest_wreg_index [4:0] $end
   $var wire  1 G! en $end
   $var wire 213 2 ex_bus [212:0] $end
   $var wire  1 H! ex_right_ready $end
   $var wire  1 9 ex_right_valid $end
   $var wire 182 ' id_bus [181:0] $end
   $var wire  1 & id_right_ready $end
   $var wire  1 1 id_right_valid $end
   $var wire 64 # if_bus [63:0] $end
   $var wire  1 & if_right_ready $end
   $var wire  1 % if_right_valid $end
   $var wire 32 ?! inst [31:0] $end
   $var wire  1 B! inst_ready $end
   $var wire 103 : mem_bus [102:0] $end
   $var wire  1 H! mem_right_ready $end
   $var wire  1 > mem_right_valid $end
   $var wire  1 A! pc_valid $end
   $var wire 32 C! rdata [31:0] $end
   $var wire 32 / reg_data1 [31:0] $end
   $var wire 32 0 reg_data2 [31:0] $end
   $var wire  5 - reg_index1 [4:0] $end
   $var wire  5 . reg_index2 [4:0] $end
   $var wire  1 >! reset $end
   $var wire 103 ? wb_bus [102:0] $end
   $var wire 32 E! wdata [31:0] $end
   $var wire  4 F! wmask [3:0] $end
   $scope module Regfile $end
    $var wire  1 =! clk $end
    $var wire 32 / data1 [31:0] $end
    $var wire 32 0 data2 [31:0] $end
    $var wire  5 - reg_index1 [4:0] $end
    $var wire  5 . reg_index2 [4:0] $end
    $var wire  1 >! reset $end
    $var wire 32 P rf[0] [31:0] $end
    $var wire 32 Z rf[10] [31:0] $end
    $var wire 32 [ rf[11] [31:0] $end
    $var wire 32 \ rf[12] [31:0] $end
    $var wire 32 ] rf[13] [31:0] $end
    $var wire 32 ^ rf[14] [31:0] $end
    $var wire 32 _ rf[15] [31:0] $end
    $var wire 32 ` rf[16] [31:0] $end
    $var wire 32 a rf[17] [31:0] $end
    $var wire 32 b rf[18] [31:0] $end
    $var wire 32 c rf[19] [31:0] $end
    $var wire 32 Q rf[1] [31:0] $end
    $var wire 32 d rf[20] [31:0] $end
    $var wire 32 e rf[21] [31:0] $end
    $var wire 32 f rf[22] [31:0] $end
    $var wire 32 g rf[23] [31:0] $end
    $var wire 32 h rf[24] [31:0] $end
    $var wire 32 i rf[25] [31:0] $end
    $var wire 32 j rf[26] [31:0] $end
    $var wire 32 k rf[27] [31:0] $end
    $var wire 32 l rf[28] [31:0] $end
    $var wire 32 m rf[29] [31:0] $end
    $var wire 32 R rf[2] [31:0] $end
    $var wire 32 n rf[30] [31:0] $end
    $var wire 32 o rf[31] [31:0] $end
    $var wire 32 S rf[3] [31:0] $end
    $var wire 32 T rf[4] [31:0] $end
    $var wire 32 U rf[5] [31:0] $end
    $var wire 32 V rf[6] [31:0] $end
    $var wire 32 W rf[7] [31:0] $end
    $var wire 32 X rf[8] [31:0] $end
    $var wire 32 Y rf[9] [31:0] $end
    $var wire 32 N wdata [31:0] $end
    $var wire  1 M wreg_en $end
    $var wire  5 O wreg_index [4:0] $end
   $upscope $end
   $scope module exe_stage $end
    $var wire 32 r Imm [31:0] $end
    $var wire 32 y Inst [31:0] $end
    $var wire 32 v PC [31:0] $end
    $var wire 14 q alu_op [13:0] $end
    $var wire 32 z alu_result [31:0] $end
    $var wire  1 =! clk $end
    $var wire 213 2 ctrl_temp_bus [212:0] $end
    $var wire 213 2 ex_ctrl_bus [212:0] $end
    $var wire 182 ' id_ctrl_bus [181:0] $end
    $var wire  1 u inst_valid $end
    $var wire  1 p is_sign $end
    $var wire  1 & left_ready $end
    $var wire  1 1 left_valid $end
    $var wire  1 >! reset $end
    $var wire  1 9 right_fire $end
    $var wire  1 H! right_ready $end
    $var wire  1 9 right_valid $end
    $var wire 32 s src1 [31:0] $end
    $var wire 32 t src2 [31:0] $end
    $var wire  1 9 valid $end
    $var wire  1 w wreg_en $end
    $var wire  5 x wreg_index [4:0] $end
    $scope module alu $end
     $var wire 32 I! add_result [31:0] $end
     $var wire 32 J! adder_a [31:0] $end
     $var wire 32 K! adder_b [31:0] $end
     $var wire  1 L! adder_cin $end
     $var wire  1 N! adder_cout $end
     $var wire 32 M! adder_result [31:0] $end
     $var wire 14 q alu_op [13:0] $end
     $var wire 32 z alu_result [31:0] $end
     $var wire 32 s alu_src1 [31:0] $end
     $var wire 32 t alu_src2 [31:0] $end
     $var wire  1 { op_add $end
    $upscope $end
   $upscope $end
   $scope module id_stage $end
    $var wire 32 O! Imm [31:0] $end
    $var wire 32 | Inst [31:0] $end
    $var wire 32 } PC [31:0] $end
    $var wire 14 !! alu_op [13:0] $end
    $var wire 182 ' bus_temp [181:0] $end
    $var wire  1 =! clk $end
    $var wire 182 ' ctrl_bus [181:0] $end
    $var wire 32 -! decoder_op_19_15 [31:0] $end
    $var wire  4 ,! decoder_op_21_20 [3:0] $end
    $var wire 16 +! decoder_op_25_22 [15:0] $end
    $var wire 32 *! decoder_op_31_26 [31:0] $end
    $var wire  1 $! inst_add $end
    $var wire  1 Q! inst_or $end
    $var wire  1 $! inst_valid $end
    $var wire  1 P! is_sign $end
    $var wire  1 P! is_sign_extend $end
    $var wire  1 & left_ready $end
    $var wire  1 % left_valid $end
    $var wire  5 )! op_19_15 [4:0] $end
    $var wire  2 (! op_21_20 [1:0] $end
    $var wire  4 '! op_25_22 [3:0] $end
    $var wire  6 &! op_31_26 [5:0] $end
    $var wire  5 %! rd [4:0] $end
    $var wire 32 / reg_data1 [31:0] $end
    $var wire 32 0 reg_data2 [31:0] $end
    $var wire  5 - reg_index1 [4:0] $end
    $var wire  5 . reg_index2 [4:0] $end
    $var wire  1 >! reset $end
    $var wire  1 ~ right_fire $end
    $var wire  1 & right_ready $end
    $var wire  1 1 right_valid $end
    $var wire  5 - rj [4:0] $end
    $var wire  5 . rk [4:0] $end
    $var wire  2 .! select_src1 [1:0] $end
    $var wire  2 .! select_src2 [1:0] $end
    $var wire 32 "! src1 [31:0] $end
    $var wire 32 #! src2 [31:0] $end
    $var wire  1 1 valid $end
    $var wire  1 $! wreg_en $end
    $var wire  5 %! wreg_index [4:0] $end
    $scope module decoder_2_4 $end
     $var wire  2 (! in [1:0] $end
     $var wire  4 ,! out [3:0] $end
    $upscope $end
    $scope module decoder_4_16 $end
     $var wire  4 '! in [3:0] $end
     $var wire 16 +! out [15:0] $end
    $upscope $end
    $scope module decoder_5_32_0 $end
     $var wire  5 /! in [4:0] $end
     $var wire 32 *! out [31:0] $end
    $upscope $end
    $scope module decoder_5_32_1 $end
     $var wire  5 )! in [4:0] $end
     $var wire 32 -! out [31:0] $end
    $upscope $end
   $upscope $end
   $scope module if_stage $end
    $var wire 32 ?! Inst [31:0] $end
    $var wire 32 @! PC [31:0] $end
    $var wire 64 # bus_temp [63:0] $end
    $var wire  1 =! clk $end
    $var wire 64 # data_bus [63:0] $end
    $var wire  1 B! inst_ready $end
    $var wire  1 A! pc_valid $end
    $var wire  1 >! reset $end
    $var wire  1 1! right_fire $end
    $var wire  1 & right_ready $end
    $var wire  1 % right_valid $end
    $var wire 32 0! temp [31:0] $end
    $var wire  1 % valid $end
   $upscope $end
   $scope module mem_stage $end
    $var wire 32 5! Imm [31:0] $end
    $var wire 32 7! Inst [31:0] $end
    $var wire 32 6! PC [31:0] $end
    $var wire 32 D! addr [31:0] $end
    $var wire 14 3! alu_op [13:0] $end
    $var wire 32 2! alu_result [31:0] $end
    $var wire 103 : bus_temp [102:0] $end
    $var wire  1 =! clk $end
    $var wire  1 G! en $end
    $var wire  1 4! inst_valid $end
    $var wire  1 H! left_ready $end
    $var wire  1 9 left_valid $end
    $var wire 213 2 mem_ctrl_bus [212:0] $end
    $var wire 32 2! mem_result [31:0] $end
    $var wire 32 C! rdata [31:0] $end
    $var wire  1 >! reset $end
    $var wire  1 > right_fire $end
    $var wire  1 H! right_ready $end
    $var wire  1 > right_valid $end
    $var wire 32 :! src1 [31:0] $end
    $var wire 32 ;! src2 [31:0] $end
    $var wire  1 > valid $end
    $var wire 103 : wb_ctrl_bus [102:0] $end
    $var wire 32 E! wdata [31:0] $end
    $var wire  4 F! wmask [3:0] $end
    $var wire  1 9! wreg_en $end
    $var wire  5 8! wreg_index [4:0] $end
   $upscope $end
   $scope module wb_syage $end
    $var wire 103 ? bus_temp [102:0] $end
    $var wire  1 =! clk $end
    $var wire  1 H! left_ready $end
    $var wire  1 > left_valid $end
    $var wire 103 : mem_ctrl_bus [102:0] $end
    $var wire  1 >! reset $end
    $var wire  1 <! right_fire $end
    $var wire  1 H! right_ready $end
    $var wire  1 <! right_valid $end
    $var wire  1 <! valid $end
    $var wire 103 ? wb_ctrl_bus [102:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000000 #
0%
1&
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 '
b00000 -
b00000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2
09
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 :
0>
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ?
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 C
0G
b00000 H
0I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
0M
b00000000000000000000000000000000 N
b00000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
0p
b00000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
0u
b00000000000000000000000000000000 v
0w
b00000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
0{
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
0~
b00000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
0$!
b00000 %!
b000000 &!
b0000 '!
b00 (!
b00000 )!
b00000000000000000000000000000001 *!
b0000000000000001 +!
b0001 ,!
b00000000000000000000000000000001 -!
b11 .!
b00000 /!
b00000000000000000000000000000000 0!
01!
b00000000000000000000000000000000 2!
b00000000000000 3!
04!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000 8!
09!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
0<!
1=!
1>!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
1A!
0B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b0000 F!
0G!
1H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
0L!
b00000000000000000000000000000000 M!
0N!
b00000000000000000000000000000000 O!
0P!
0Q!
#1
0=!
#2
1=!
#3
0=!
#4
1=!
#5
0=!
0>!
b00000000000100000000000000010001 ?!
1B!
#6
b0000000000000000000000000000000000000000000100000000000000010001 #
1%
b00000000000100000000000000010001 |
b00000000000001 !!
1$!
b10001 %!
b01 (!
b0010 ,!
b00 .!
11!
1=!
#7
0=!
#8
0&
b00000000000000110000000000000000000000000000000000000000000100000000000000010001100011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 '
11
b00000000000001 q
1u
1w
b10001 x
b00000000000100000000000000010001 y
1{
b00000000000000000000000000000100 0!
01!
1=!
b00000000000000000000000000000100 @!
0A!
#9
0=!
#10
0%
01
b000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000010001100011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2
19
b00000000000001 3!
14!
b00000000000100000000000000010001 7!
b10001 8!
19!
1=!
#11
0=!
#12
09
b1100011000000000001000000000000000100010000000000000000000000000000000000000000000000000000000000000000 :
1>
1=!
#13
0=!
#14
0>
b1100011000000000001000000000000000100010000000000000000000000000000000000000000000000000000000000000000 ?
1M
b10001 O
1<!
1=!
#15
0=!
#16
b1100011000000000001000000000000000100010000000000000000000000000000000000000000000000000000000000000000 C
1G
b10001 H
1I
b00000000000100000000000000010001 J
0<!
1=!
#17
0=!
#18
1=!
#19
0=!
#20
1=!
#21
0=!
#22
1=!
#23
0=!
#24
1=!
#25
0=!
#26
1=!
#27
0=!
#28
1=!
#29
0=!
#30
1=!
#31
0=!
